[
  {
    "objectID": "guia.html#recomendaciones-al-realizar-las-guías",
    "href": "guia.html#recomendaciones-al-realizar-las-guías",
    "title": "Guía de Ejercicios",
    "section": "Recomendaciones al realizar las guías",
    "text": "Recomendaciones al realizar las guías\n\nPrestá atención al leer el enunciado. En particular:\n\nSi se pide una función que devuelva o calcule un valor, la función debe tener una función return.\nSi se pide una función que imprima un valor, la función debe tener un print.\nSi se pide una función que pida o pregunte algo al usuario, la función debe tener un input.\nA menos que se diga específicamente “pedirle al usuario”, no es necesario que el programa contenga input. En todo caso, hacer que la función reciba el o los datos por parámetro.\n\nCada ejercicio puede tener muchas soluciones posibles. Una vez que encuentres una solución, en lugar de pasar al siguiente ejercicio, pensá si se te ocurre una solución cuya codificación sea más simple.\nEs muy importante que el código sea lo más claro y legible posible.\n\nEn particular, nombres de funciones y variables deben ser descriptivos.\nTambién prestá atención a los espacios en blanco y a la indentación.\n\nNo documentes en exceso, pero tampoco ahorres documentación necesaria.\nProbá siempre que el código cumpla con lo solicitado."
  },
  {
    "objectID": "guia.html#guía-1-introducción-a-la-algoritmia-y-la-programación",
    "href": "guia.html#guía-1-introducción-a-la-algoritmia-y-la-programación",
    "title": "Guía de Ejercicios",
    "section": "Guía 1: Introducción a la Algoritmia y la Programación",
    "text": "Guía 1: Introducción a la Algoritmia y la Programación\n\n\n\n\n\n\nRecomendación\n\n\n\nEn esta guía nos dedicaremos a introducirnos en los conceptos de programación y algoritmo. Para los primeros seis ejercicios, te recomendamos ver este video para recordar cómo entiende la computadora nuestras instrucciones.\n\n\n\nSe tiene que explicar a una máquina exactamente cómo servir un vaso de jugo (de los que vienen en cartón) de la heladera. Recordando la definición de algoritmo, hacer una descripción paso a paso de lo que se tiene que hacer y usar para lograr el objetivo. Pista: No vas a necesitar nada de código en este ejercicio, sólo nombrar los pasos.\nSe tiene que explicar a una máquina exactamente cómo hacer una tostada con queso, pensá qué ingredientes se necesitan con sus cantidades, cómo tiene que ser el espacio de trabajo y los elementos que va a necesitar usar. Recordando la definición de algoritmo, hacer una descripción paso a paso de lo que se tiene que hacer y usar para hacer una tostada con queso. Pista: No vas a necesitar nada de código en este ejercicio, sólo nombrar los pasos.\nSe te pide que organices una colecta de alimentos no perecederos por la Ciudad de Buenos Aires. Contamos con algunos automóviles y camionetas de voluntarios, un listado de donaciones, listado de los alimentos a donar, la disponibilidad horaria y la dirección en la cual se dejan los alimentos. La colecta se realiza en un solo día. ¿Cómo la organizarías? Pista: No vas a necesitar nada de código en este ejercicio, sólo nombrar los pasos.\nTenés que enviar invitaciones personalizadas para tu cumpleaños. Cada invitación tiene que mencionar el nombre de la persona y la relación que tiene con vos. Contamos con una impresora a la que le das el texto a enviar, un listado con los nombres de los invitados y la relación que cada uno tiene con vos. ¿Cómo redactarías el texto de la invitación? Pista: No vas a necesitar nada de código en este ejercicio, sólo nombrar los pasos.\nSe te encargó definir qué datos son necesarios para el registro de estudiantes en un curso de inglés. ¿Qué datos crees que deberían ser obligatorios y cuáles opcionales? ¿Y si el curso es de cocina? Pista: No vas a necesitar nada de código en este ejercicio, sólo nombrar los pasos.\nContás con un listado de cosas a comprar y tenes que ir a un supermercado que cuenta con distintas góndolas o pasillos. Cada góndola o pasillo puede contar con varios, uno o ninguno de los productos de tu lista. ¿Cuál sería el listado de instrucciones para poder terminar lo más rápido posible? Pista: No vas a necesitar nada de código en este ejercicio, sólo nombrar los pasos.\nCon el anexo de Replit de la Unidad 1, realizá tu primer programa: hacé que se imprima por pantalla un “¡Hola mundo!”."
  },
  {
    "objectID": "guia.html#guía-2-tipos-de-datos-expresiones-y-funciones",
    "href": "guia.html#guía-2-tipos-de-datos-expresiones-y-funciones",
    "title": "Guía de Ejercicios",
    "section": "Guía 2: Tipos de Datos, Expresiones y Funciones",
    "text": "Guía 2: Tipos de Datos, Expresiones y Funciones\n\nGuardar el texto “Hola, Mundo!” en una variable e imprimirla por pantalla.\nGuardar los números 1, 2 y 3 en tres variables distintas e imprimirlos por pantalla.\n\nGuardar los números 1, 2 y 3 en tres variables distintas y luego sumarlos e imprimir el resultado por pantalla.\n\nRepetir con las distintas operaciones disponibles que se vieron en la unidad 2: resta, multiplicación, división, división entera, resto, potencia; combinando los números entre sí.\n\nCrear un programa que le solicite al usuario:\n\nSu nombre y lo imprima por pantalla.\nSu edad y la imprima por pantalla.\nSu edad, le sume 1, y la imprima por pantalla.\n\nCrear un programa que le solicite al usuario un número, y que devuelva el resto obtenido de dividirlo por 2.\n¿Qué operador vimos para obtener el resto?\nEscribir un programa que le pida al usuario su año de nacimiento, y que le diga qué edad tiene en el año actual.\nCrear un programa que le solicite al usuario 5 enteros y que muestre por pantalla el promedio de ellos. Hacerlo de dos formas:\n\nPrimero, usando 5 variables para cada entero.\nDespués, usando una sola variable para almacenar la suma de los 5 enteros. ¿Cómo se te ocurre que podrías hacer?\n\nCrear una función que reciba un número y que devuelva el valor absoluto.\nCrear una función que reciba un número y que devuelva True si es par, y False si es impar.\nCrear una función que reciba un número y un string, y que devuelva ambos concatenados dentro de un nuevo string.\nCrear una función que reciba dos enteros y que devuelva el resto y el cociente entre ellos.\nCrear una función que le pida al usuario su nombre y apellido, e los imprima con el siguiente formato: “Apellido, Nombre”.\nHacer una función que reciba una palabra y devuelva la cantidad de letras que tiene.\n\nHacer una función que reciba una palabra y que imprima los primeros 5 caracteres únicamente. Ejemplo: Si se recibe “pensamiento” se debe imprimir “pensa”.\nHacer una función que reciba una palabra y que imprima sólo los caracteres ubicados en posiciones pares. Ejemplo: Si se recibe “pensamiento” se debe imprimir “pnaino”.\nHacer una función que reciba una palabra y que imprima la palabra dada vuelta. Ejemplo: Si se recibe “materia” se debe imprimir “airetam”.\n\nHacer una funcion que reciba una palabra, le borre todas las letras “a” e imprima el resultado por pantalla. Pista: usar una función predefinida de Python. Ejemplo: Si se recibe “casa” se debe imprimir “cs”. Pista: usar slices.\nAnalizar qué tipo de dato (o error) se obtiene al hacer las siguientes operaciones:\n\n5 / 2\n5 // 2\n5 % 2\n5 ** 2\n5.0 / 2\n5.0 // 2\n5.0 % 2\n5.0 ** 2\n5 / 2.0\n5 // 2.0\n5 % 2.0\n5 ** 2.0\n5.0 / 2.0\n5.0 // 2.0\n5.0 % 2.0\n5.0 ** 2.0\n\"Hola\" * 2\n\"Hola\" + 2\n\"Hola\" + \"2\"\nx = \"Hola\"\nx += \" mundo\"\n\n\nEscribir una función que convierta un valor dado en grado Celcius, a Fahrenheit. Recordar que la fórmula para la conversión es: F = 9/5 * C + 32.\nEscribir una función que convierta un valor dado en grados Fahrenheit, a Celcius. Usar la misma fórmula anterior.\n\nEscribir una función que calcule el área de un triángulo recibiendo como parámetros su base y su altura.\nSiendo el cálculo de la norma de un vector \\(v\\) en \\(R^3\\):\n\\[||v|| = \\sqrt{v_1^2 + v_2^2 + v_3^2}\\]\nEscribir una función que calcule la norma de un vector en R3 recibiendo como parámetros las 3 componentes \\(v_1\\), \\(v_2\\) y \\(v_3\\) del mismo.\nDesafío (no obligatorio): Calcular el área de un rectángulo (alineado con los ejes \\(x\\) e \\(y\\)), dadas sus coordenadas \\(x_1\\), \\(x_2\\), \\(y_1\\) e \\(y_2\\)."
  },
  {
    "objectID": "guia.html#guía-3-estructuras-de-control",
    "href": "guia.html#guía-3-estructuras-de-control",
    "title": "Guía de Ejercicios",
    "section": "Guía 3: Estructuras de Control",
    "text": "Guía 3: Estructuras de Control\n\n1. Decisiones\n\nEscribir una función que, dado un número entero \\(n\\), calcule si es impar o no.\nEscribir una implementación propia de la función \\(abs\\), que devuelva el valor absoluto de cualquier valor que reciba. Ejemplo: mi_abs(5) devuelve 5 y mi_abs(-5) devuelve 5. Pista: No se puede usar la función predefinida abs.\nEscribir una función que reciba un número y devuelva True si es entero y False si no lo es. Pista: no se puede usar la función isinstance.\nEscribir una función para determinar si una letra recibida es vocal o no. La misma debe devolver un valor booleano. Luego, escribir una función para determinar si una letra es consonante o no.\n\nResolver sin el uso de in ni not in.\nResolver usando in y not in.\nResolver para que la función identifique tanto mayúsculas como minúsculas. Pista: investigar los métodos lower y upper de string.\n\n\n\n\n\n\n\n\nTip: in y not in\n\n\n\n\n\n¿Conocés el uso de in?\nPara saber si un elemento está en una lista o en un string, podemos usar in y not in. Por ejemplo:\n\n'a' in 'hola'\n\nTrue\n\n\n\n'w' in 'hola'\n\nFalse\n\n\n\n'w' not in 'hola'\n\nTrue\n\n\n\n'casa' in ['cama', 'mesa', 'silla']\n\nFalse\n\n\n\n\n\n\nEscribir funciones que resuelvan los siguientes problemas:\n\nDado un año, que devuelva si es bisiesto. Nota: un año es bisiesto si es un número divisible por 4, pero no si es divisible por 100, excepto que también sea divisible por 400.\nDado un mes y un año, que devuelva la cantidad de días correspondientes.\nPedirle al usuario su día y mes de cumpleaños. El programa debe imprimir un mensaje indicando a qué signo corresponde el usuario.\n\nAries: 21 de marzo al 20 de abril.\nTauro: 21 de abril al 20 de mayo.\nGeminis: 21 de mayo al 21 de junio.\nCancer: 22 de junio al 23 de julio.\nLeo: 24 de julio al 23 de agosto.\nVirgo: 24 de agosto al 23 de septiembre.\nLibra: 24 de septiembre al 22 de octubre.\nEscorpio: 23 de octubre al 22 de noviembre.\nSagitario: 23 de noviembre al 21 de diciembre.\nCapricornio: 22 de diciembre al 20 de enero.\nAcuario: 21 de enero al 19 de febrero.\nPiscis: 20 de febrero al 20 de marzo.\nPiedra, papel o tijera: escribir un programa de “Piedra, papel o tijera” tal que sea imposible que el usuario gane. El usuario debe ingresar R (piedra), P (papel), o T (tijera) y la computadora debe siempre ganarle. Ejemplo:\n¡Piedra (R), papel (P) o tijera (T)!\nIngrese jugada: R\n¡Papel! ¡Gané!\n¡Piedra (R), papel (P) o tijera (T)!\nIngrese jugada: P\n¡Tijera! ¡Gané!\n¡Piedra (R), papel (P) o tijera (T)!\nIngrese jugada: T\n¡Piedra! ¡Gané!\n¡Piedra (R), papel (P) o tijera (T)!\nIngrese jugada: M\nEsa jugada no está disponible.\nSuponiendo que el primer día del año fue lunes, escribir una función que reciba un número con el día del año (de 1 a 366) y devuelva el día de la semana que le toca. Por ejemplo: si se recibe ‘3’, debe devolver “miércoles”, y si se recibe ‘9’, debe devolver “martes”.\n\n\n\n2. Ciclos\n\nEscribir función que:\n\nImprima por pantalla todos los números entre 10 y 20.\nSalude a todas las personas de esta lista [Flaminia, Iara, Agostina, Priscila, Sol, Lucía] con el mensaje \"Hola &lt;nombre&gt;! Vamos a aprender a programar\".\nLe pida al usuario que ingrese 5 números y le muestre la suma total de todos ellos.\nImprima por pantalla todos los números entre 100 y 199 que sean divisibles por 7.\nReciba dos números, y recorra todos los números entre ellos, imprimiendo en pantalla si es par o impar. Por ejemplo, recibiendo 1 y 3, debe imprimir:\n\n1 es impar\n2 es par\n3 es impar\nSe quiere hacer un programa para enseñar a los niños las tablas de multiplicar del 1 al 10. Crear una función que reciba un número e imprima por pantalla la tabla de multiplicar de ese número. Ejemplo:\nmostrar_tablas_para(1)\ndebe imprimir:\n1 x 1 = 1\n1 x 2 = 2\n1 x 3 = 3\n1 x 4 = 4\n1 x 5 = 5\n1 x 6 = 6\n1 x 7 = 7\n1 x 8 = 8\n1 x 9 = 9\n1 x 10 = 10\nmostrar_tablas_para(-2)\ndebe imprimir:\nError: El número debe ser positivo y estar entre 1 y 10\nCrear una función que cante el feliz cumpleaños. Dado un entero, debe imprimir ‘Que los cumplas feliz’ en distintas líneas por esa cantidad de veces.\n\nNecesitamos escribir un programa de cobro en el supermercado. La función debe recibir un número entero que representa el monto a pagar y debe permitir al usuario que ingrese valores, hasta que el pago se haya realizado en su totalidad. Además, le debe ir indicando cuánto le queda por pagar. El programa no da vuelto.\n\nEjemplo: Su total a pagar es: 500  Ingrese el monto a pagar: 100  Pendientes: 400. Ingrese el monto a pagar: 200  Pendientes: 200. Ingrese el monto a pagar: 200  Pendientes: 0. Gracias por su compra.\n\nHacer que el programa anterior dé vuelto:\n\nEjemplo: Su total a pagar es: 500  Ingrese el monto a pagar: 100  Pendientes: 400. Ingrese el monto a pagar: 200  Pendientes: 200. Ingrese el monto a pagar: 300  Pendientes: 0. Su vuelto es: 100. Gracias por su compra.\nEscribir un programa que le pida al usuario que ingrese un número. Para ese número, se imprime la tabla de multiplicar del 1 al 10. Luego, se le vuelve a pedir otro número. Si el usuario ingresa “X”, el programa debe terminar. El usuario debe poder ingresar números indefinidamente hasta que ingrese “X”. Se puede reutilizar la función del ejercicio 9 de esta guía.\nEjemplo: Hola! Esto es Tablas de Multiplicar  Ingrese un número o \"X\" para salir: 1  1 x 1 = 1  1 x 2 = 2  1 x 3 = 3  1 x 4 = 4  1 x 5 = 5  1 x 6 = 6  1 x 7 = 7  1 x 8 = 8  1 x 9 = 9  1 x 10 = 10  Ingrese un número o \"X\" para salir: -2  Error: El número debe ser positivo y estar entre 1 y 10  Ingrese un número o \"X\" para salir: X  ¡Adios!\nManejo de contraseñas\n\nEscribir un programa que contenga una constraseña inventada, que le pregunte al usuario la contraseña, y no le permita continuar hasta que la haya ingresado correctamente.\nModificar el programa anterior para que solamente permita una cantidad fija de intentos.\nModificar el programa anterior para que sea una función que devuelva si el usuario ingresó o no la contraseña correctamente, mediante un valor booleano (True o False).\n\n\nHacer una función que reciba un número del 1 al 10, y luego permita al usuario poder adivinar ese número, ingresando valores repetidamente. Para cada ingreso del usuario, el programa debe indicarle si su numero es menor o mayor al número a adivinar. Una vez que el usuario ingresa el número correcto, lo felicita y termina.\nRepetir permitiendo únicamente 3 intentos.\nRepetir generando el número aleatoriamente de la siguiente forma dentro de la función, sin recibirlo por parámetro:\n\n\n\nimport random\nnumero_a_adivinar = random.randint(1, 10)\nprint(numero_a_adivinar)\n\n6\n\n\n\n\n\n\n\n\nTip: Librerías\n\n\n\n\n\n¿Sabías que Python tiene muchas librerías que podés usar para hacer cosas más complejas? Por ejemplo, la librería random tiene funciones para generar números aleatorios. También hay otras librerías como Pandas para trabajar con datos, Matplotlib para hacer gráficos, Numpy para trabajar con matrices, y muchas más. Vamos a estar viendo estas tres en la última unidad de la materia.\nUna librería es un conjunto de funciones que alguien más escribió y que podemos usar en nuestros programas. Para usar una librería, primero tenemos que importarla. Por ejemplo, para usar la librería random, tenemos que poner import random al principio de nuestro programa (arriba de todo en nuestro archivo). Luego, podemos usar las funciones de la librería, como random.randint(1, 10).\n\n\n\n\n\nQueremos modelar una máquina de sacar juguetes. Debemos hacer una función que reciba un número que representa la cantidad de fichas \\(x\\) que necesita la máquina para funcionar. Se debe imprimir un mensaje en pantalla que indique “Ingresá \\(x\\) fichas para comenzar”. El usuario deberá ingresar entonces letras “F”, que representan a las fichas. Notar que si se ingresa algo distinto a “F”, se ignora.\n\nSe debe seguir solicitando fichas siempre que no se haya alcanzado la cantidad necesaria para funcionar. Cuando se haya alcanzado la cantidad necesaria, se debe imprimir un mensaje que indique “¡A jugar!”. Ejemplo:\nIngresá 2 fichas para comenzar: F\nIngresá 2 fichas para comenzar: B\nIngresá 2 fichas para comenzar: Hola\nIngresá 2 fichas para comenzar: F\n¡A jugar!\n\nModificar el programa anterior para que vaya mostrando la cantidad de fichas que faltan para comenzar a jugar. Ejemplo:\n\nIngresá 2 fichas para comenzar: F\nIngresá 1 fichas para comenzar: B\nIngresá 1 fichas para comenzar: ficha\nIngresá 1 fichas para comenzar: F\n¡A jugar!\nCrear una función que calcule si un número es primo o no. Un número es primo cuando solamente es divisible por sí mismo y por 1. Pista: usar el operador módulo %.\nDesafío (obligatorio): Crear una función que reciba un número entero e imprima los números primos entre 0 y el número ingresado.\nDesafío (obligatorio):\n\nCrear una función que reciba dos números, y devuelva la suma de todos los números múltiplos de 7 entre esos dos números. Por ejemplo, si recibe 3 y 25, debe devolver 7 + 14 + 21 = 42. Si recibe 3 y 4, debe devolver 0, ya que no hay múltiplos de 7 entre esos dos números.\nRepetir calculando el promedio en vez de la suma.\nRepetir calculando únicamente el promedio entre los primeros 3 múltiplos de 7 encontrados. Pista: usar break.\nRepetir calculando únicamente el promedio entre los múltiplos de 7 encontrados que no sean múltiplos de 2. Pista: usar continue.\n\nDesafío (obligatorio):\n\nEscribir una función que dada la cantidad de ejercicios de un examen, y el porcentaje de ejercicios bien resueltos necesario para aprobar dicho examen, revise un grupo de exámenes.\n\nPara ello, en cada paso debe preguntarle al usuario la cantidad de ejercicios resueltos por el alumno, o pedirle que ingrese “*” para salir. Debe mostrar por pantalla el porcentaje correspondiente a la cantidad de ejercicios resueltos respecto a la cantidad de ejercicios del examen y una leyenda que indique si aprobó o no.\n\nAdicional al punto anterior: imprimir un mensaje informándole al usuario la cantidad de ejercicios y el % de aprobación.\nValidar que el usuario siempre ingrese números positivos y menor o iguales a la cantidad de ejercicios del examen, o “*“. De lo contrario, mostrar un mensaje de error y volver a pedirle el dato al usuario."
  },
  {
    "objectID": "guia.html#guía-4-tipos-de-estructuras-de-datos",
    "href": "guia.html#guía-4-tipos-de-estructuras-de-datos",
    "title": "Guía de Ejercicios",
    "section": "Guía 4: Tipos de Estructuras de Datos",
    "text": "Guía 4: Tipos de Estructuras de Datos\n\nCadenas de caracteres\n\nEscribir funciones que dada una cadena y un caracter:\n\nInserte el caracter entre cada letra de la cadena. Ejemplo: 'separar' y '-' debería devolver 's-e-p-a-r-a-r'.\n\nReemplace todos los espacios por el caracter. Ejemplo: 'mi archivo de texto.txt' y '_’ debería devolver 'mi_archivo_de_texto.txt'.\n\nReemplace todos los dígitos de la cadena por el caracter. Ejemplo: 'su clave es: 1540' y '*' debería devolver 'su clave es: ****'.\n\nInserte el caracter cada 3 dígitos en la cadena. Ejemplo: '2552552550' y '.' debería devolver `’\nModificar todas las anteriores para que, adicionalmente, reciba un parámetro que indique la cantidad máxima de reemplazos o inserciones a realizar. Ejemplo: 'su clave es: 1540', '*' y 3 debería devolver 'su clave es: ***0'.\n\nEscribir una función que reciba una cadena que contiene un largo número entero y devuelva una cadena con el número y las separaciones de miles. Por ejemplo, si recibe 1234567890, debe devolver 1.234.567.890. Cuidado: no es lo mismo 123.456.789.0 que 1.234.567.890. Tienen que ser separaciones de miles y quedar un número válido.\nEscribir funciones que dada una cadena de caracteres:\n\nDevuelva la primera letra de cada palabra. Ejemplo: si se recibe Ciclo Básico Común se debe devolver CBC.\nIndique si se trata de un palíndromo. Por ejemplo, anita lava la tina es un palíndromo (se lee igual de izquierda a derecha que de derecha a izquierda).\n\nEscribir funciones que dadas dos cadenas de caracteres:\n\nIndique si la segunda cadena es subcadena de la primera. Por ejemplo, 'compu' es subcadena de 'computacional'.\nDevuelva la que sea anterior en orden alfábetico. Por ejemplo, si recibe 'kde' y 'gnome' debe devolver 'gnome'.\n\nEscribir una función que, dada una cadena de caracteres, devuelva una lista con cada uno de los caracteres que la componen en mayúscula. Ejemplo: 'Hola' debe devolver ['H', 'O', 'L', 'A']. Restricción: no se permite el uso de ciclos for/while.\nEscribir una función que, dada una cadena de caracteres, devuelva una tupla con cada uno de los caracteres que no es una vocal. Ejemplo: 'Algoritmos' debe devolver ('l', 'g', 'r', 't', 'm', 's'). Restricción: no se permite el uso de ciclos for/while.\nEscribir una función que, dada una cadena de caracteres, devuelva el número de índice del último caracter. Por ejemplo, para la cadena 'Hola' debe devolver 3. Restricción: no se permite el uso de ciclos for/while.\nDesafío (obligatorio):\n\nSe quiere implementar un buscador dentro de un editor de texto, que permita encontrar todas las ocurrencias de una palabra en un texto. Para ello, se debe implementar una función que reciba como parámetro una palabra y un texto, y que devuelva una lista con las posiciones de inicio de cada ocurrencia de la palabra dentro del texto. Ejemplo: si se busca 'al' en 'calcule el precio al valor actual', debe devolver [1, 18, 22, 31]. Pista: index devolverá un error si la subcadena no se encuentra. ¿Qué otro método tenemos disponible para buscar subcadenas?\nModificar la función anterior para que devuelva la cantidad de ocurrencias encontradas. Ejemplo: si se busca 'al' en 'calcule el precio al valor actual', debe devolver 4. Restricción: No se puede usar el método len.\n\nDesafío (no obligatorio): Escribir una función que reciba dos cadenas de caracteres y devuelva una lista con todos los caracteres que no tienen en común. Ejemplo: 'Python' y 'Hola' debería devolver el conjunto de letras ['P', 'y', 't', 'l', 'a', 'n'], indiferentemente del orden y de si está en mayúscula o minúscula. Nota: para que un caracter esté en la lista, no es necesario que esté en la misma posición. Restricción: no se permite el uso de ciclos for/while. Pista: investigar cómo usar lambda.\n\n\n\nRangos, Tuplas y Listas\n\nUsar un rango para:\n\nImprimir los números del 10 al 50 inclusive, saltando de 5 en 5.\nImprimir los números del 40 al 20 en orden decreciente, saltando de 2 en 2.\nCrear una lista con los números del 4 al 10. Luego, acceder con el índice a los elementos que contienen a los números 4, 6 y 9 e impimirlos por pantalla. Pista: recordar que los índices comienzan en 0.\n\nEscribir una función que reciba:\n\nUna lista y devuelva True si su longitud es par y False si su longitud es impar.\n\nUna lista de números cualesquiera y devuelva el elemento máximo y el mínimo.\nUna lista de números y devuelva otra lista con los mismos números ordenados de menor a mayor. Por ejemplo, si recibe [5, 10, 7, 3] debe devolver [3, 5, 7, 10].\n\n\nEscribir una función que reciba una lista de nombres y un número, que representa el cupo. La función debe devolver en una lista a los nombres que no pudieron entrar al curso por falta de cupo. Ejemplo: chequear_cupo(['Agustina', 'Iara', 'Priscila', 'Sol', 'Lucía'], 3) debe devolver ['Sol', 'Lucía'].\nModificar la función anterior para que devuelva únicamente a la última persona de la lista de la gente que pudo entrar. Ejemplo: chequear_cupo(['Agustina', 'Iara', 'Priscila', 'Sol', 'Lucía'], 3) debe devolver 'Priscila', porque es la última que tuvo cupo.\n\nDada la lista de tuplas [(\"Argentina\", 3), (\"España\",1), (\"Uruguay\", 2), (\"Francia\",2)], donde cada tupla contiene un país y la cantidad de mundiales que ganaron:\n\nHacer una función que reciba la lista por parámetro e imprima la información de cada país con el siguiente formato:\n\nPaís: &lt;nombre&gt; - Copas: &lt;cantidad&gt;\nSi y sólo si el país es “Argentina”, se debe imprimir el nombre con 3 estrellas: \"Argentina⭐⭐⭐\". Usar el operador abreviado +=.\n\nHacer una función que reciba la lista por parámetro y devuelva la cantidad de mundiales que ganaron entre todos los países. Ejemplo: contar_mundiales([(\"Argentina\", 3), (\"España\",1), (\"Uruguay\", 2), (\"Francia\",2)]) debe devolver 8.\nHacer una función que reciba la lista por parámetro y la devuelva, ordenada por cantidad de copas ganadas.\nHacer una función que reciba la lista por parámetro y devuelva una lista con los países que tienen más de una copa ganada.\n\nEscribir una función que reciba dos fichas de dominó y determine si encajan o no entre sí.\n\nResolver teniendo en cuenta que las fichas se reciben con formato de tuplas. Ejemplo: (3,4) y (5,4).\nResolver teniendo en cuenta que las fichas se reciben con formato de string. Ejemplo: '3-4' y '5-4'.\n\nEscribir una función que reciba dos vectores y devuelva su producto escalar. El producto escalar se calcula como: Siendo \\(v1 = (v1_1, v1_2, ..., v1_n)\\) y \\(v2 = (v2_1, v2_2, ..., v2_n)\\), entonces\n\\[v1 \\cdot v2 = (v1_1 \\cdot v2_1) + (v1_2 \\cdot v2_2) + ... + (v1_n \\cdot v2_n)\\] Si los vectores no tienen las mismas dimensiones, la función debe devolver None.\nSe tiene una base de datos con nombres de libros de la siguiente forma [\"La Noche de la Usina\", \"La Pregunta de sus Ojos\", \"Ser Feliz era Esto\",...], y se quiere saber cuántos libros repetidos tienen. Escribir una función que reciba la base de datos y devuelva, para cada uno de los títulos, cuántos ejemplares hay. La lista no tiene un tamaño fijo, y puede contener muchos títulos repetidos.\n\nEscribir una función que reciba una tupla, un índice, y un nuevo valor. La función debe modificar la tupla, cambiando el valor en la posición dada por el índice, por el nuevo valor pasado como parámetro. Devolver la tupla modificada.\nRepetir el ejercicio anterior, pero con una lista.\nRepetir ambos si ahora, en vez de recibir un índice, se recibe el valor a eliminar. Si no se contiene al valor, se devuelve la estructura tal cual se recibió.\n\nEscribir una función que reciba una lista y un número \\(n\\). Para dicho número \\(n\\), debe imprimir los últimos \\(n\\) elementos de la lista en orden inverso, y luego devolver la lista sin ellos. Ejemplo: Si se recibe [1, 2, 3, 4, 5] y n = 2, debe imprimir 5, 4 y devolver [1, 2, 3].\nEscribir una función que reciba una lista de números y devuelva la misma lista en orden inverso.\nEscribir una función que dado un valor \\(n\\), devuelva una lista con los números del 1 a \\(n\\). Restricción: usar listas por comprensión.\nEscribir una función que devuelva una matriz y una tupla (fila, columna), y devuelva el valor ubicado en esa posición de la matriz. Ejemplo: si se recibe la matriz [[1, 2], [3, 4]] y la tupla (0, 1), debe devolver 2.\nSe tiene una lista de supermercado escrita como string con productos separados por coma: \"pan, arroz, pescado, jugo, fideos,...\".\n\nEscribir una función que reciba la cadena de caracteres de los productos de supermercado y devuelva una lista con cada uno de los productos por separado: ['pan', 'arroz', 'pescado', 'jugo', 'fideos', ...].\nSe tiene además otra cadena de caracteres con los precios de cada producto: \"100, 50, 200, 80, 30,...\". Escribir una función que reciba ambas cadenas y devuelva una lista con tuplas de (producto, precio): [('pan', 100), ('arroz', 50), ('pescado', 200), ('jugo', 80), ('fideos', 30), ...].\nPara la función del punto anterior, escribir otra función que reciba la lista de tuplas y devuelva el precio total de la lista de compras.\n\nSe quiere crear una lista de supermercado, solicitándole al usuario productos hasta que ingrese el valor ‘X’. La función debe devolver los productos en un string, separados por comas. Ejemplo: si se ingresa ‘pan’, ‘arroz’, ‘pescado’, ‘X’, debe devolver \"pan, arroz, pescado\".\nHacer una función que reciba una lista de palabras, las ordene en orden alfabético y luego las una en un string separadas por espacios. Ejemplo: si recibe ['hola', 'como', 'estas'], debe devolver \"como estas hola\".\nDesafio (obligatorio): Escribir una función que reciba un tamaño y devuelva una matriz con 1 en la diagonal principal y 0 en el resto. Ejemplo: si recibe 4, debe devolver la matriz identidad de tamaño 4x4. \\[\n\\begin{bmatrix}\n1 & 0 & 0 & 0 \\\\\n0 & 1 & 0 & 0 \\\\\n0 & 0 & 1 & 0 \\\\\n0 & 0 & 0 & 1 \\\\\n\\end{bmatrix}\n\\]\nDesafio (obligatorio): Escribir una función que reciba una matriz y devuelva su transpuesta. Ejemplo: si recibe la matriz [[1, 2, 3], [4, 5, 6]], debe devolver [[1, 4], [2, 5], [3, 6]].\n\nSi se recibe:\n\\[\\begin{bmatrix}\n1 & 2 & 3  \\\\\n4 & 5 & 6  \\\\\n\\end{bmatrix}\\]\nSe debe devolver:\n\\[\\begin{bmatrix}\n1 & 4 \\\\\n2 & 5 \\\\\n3 & 6 \\\\\n\\end{bmatrix}\\]\n\nDesafio (no obligatorio): Agenda Simplificada\nEscribir una función que reciba una cadena a buscar y una lista de tuplas (nombre_completo, telefono), y busque dentro de la lista todas las entradas que contengan en el nombre completo la cadena recibida (puede ser el nombre, el apellido o sólo una parte de cualquiera de ellos). Debe devolver una lista con todas las tuplas encontradas.\nDesafio (no obligatorio): Sistema de facturación simplificado.\nSe cuenta con una lista ordenada de productos con tuplas de (identificador, descripción, precio), y una lista de los productos a facturar, con tuplas de (identificador, cantidad).\n\nSe desea generar una factura que incluya la cantidad, la descripción, el precio unitario y el pre- cio total de cada producto comprado, y al final imprima el total general.\nEscribir una función que reciba ambas listas e imprima por pantalla la factura solicitada.\n\nSuper Desafio (no obligatorio): Batalla Naval\nSe tiene una matriz de 10x10 que representa un tablero. Cada celda contiene un 0 si está vacía, o un 1 si hay un barco (consideramos que en este caso, sólo hay barcos unitarios que ocupan un espacio).\n\nLa posición de los barcos se representa con tuplas de (fila, columna). Por ejemplo, si se tiene un barco en la fila 1, columna 3, se representa con la tupla (1, 3).\nEscribir una función que cree un tablero con 10 barcos ubicados aleatoriamente (usar la libreria random), y que permita al usuario intentar adivinar dónde están.\nEl usuario luego ingresa una posición, y la máquina indica si había un barco en esa posición (mostrando un mensaje por pantalla “¡Hundido!”) o no (“¡Agua!”“).\nEl usuario gana cuando hunde todos los barcos del tablero. Si se equivoca más de 5 veces, pierde."
  }
]