# Guía de Ejercicios {.unnumbered}

## Recomendaciones al realizar las guías

- Prestá atención al leer el enunciado. En particular:
    - Si se pide una función que *devuelva* o *calcule* un valor, la función debe tener una función `return`.
    - Si se pide una función que *imprima* un valor, la función debe tener un `print`.
    - Si se pide una función que *pida* o *pregunte* algo al usuario, la función debe tener un `input`.
    - A menos que se diga específicamente "pedirle al usuario", no es necesario que el programa contenga `input`. En todo caso, hacer que la función reciba el o los datos por parámetro.
- Cada ejercicio puede tener muchas soluciones posibles. Una vez que encuentres una solución, en lugar de pasar al siguiente ejercicio, pensá si se te ocurre una solución cuya codificación sea más simple.
- Es muy importante que el código sea lo más claro y legible posible.
    - En particular, nombres de funciones y variables deben ser descriptivos.
    - También prestá atención a los espacios en blanco y a la indentación.
- No documentes en exceso, pero tampoco ahorres documentación necesaria.
- Probá siempre que el código cumpla con lo solicitado.

## Guía 1: Introducción a la Algoritmia y la Programación

:::{.callout-note}
### Recomendación
En esta guía nos dedicaremos a introducirnos en los conceptos de programación y algoritmo. 
Para los primeros seis ejercicios, te recomendamos ver [este video](https://www.youtube.com/watch?v=cDA3_5982h8) para recordar cómo entiende la computadora nuestras instrucciones.
:::

1. Se tiene que explicar a una máquina exactamente cómo servir un vaso de jugo (de los que vienen en cartón) de la heladera. Recordando la definición de algoritmo, hacer una descripción paso a paso de lo que se tiene que hacer y usar para lograr el objetivo. Pista: No vas a necesitar nada de código en este ejercicio, sólo nombrar los pasos.

2. Se tiene que explicar a una máquina exactamente cómo hacer una tostada con queso, pensá qué ingredientes se necesitan con sus cantidades, cómo tiene que ser el espacio de trabajo y los elementos que va a necesitar usar. Recordando la definición de algoritmo, hacer una descripción paso a paso de lo que se tiene que hacer y usar para hacer una tostada con queso. Pista: No vas a necesitar nada de código en este ejercicio, sólo nombrar los pasos.

3. Se te pide que organices una colecta de alimentos no perecederos por la Ciudad de Buenos Aires. Contamos con algunos automóviles y camionetas de voluntarios, un listado de donaciones, listado de los alimentos a donar, la disponibilidad horaria y la dirección en la cual se dejan los alimentos. La colecta se realiza en un solo día. ¿Cómo la organizarías? Pista: No vas a necesitar nada de código en este ejercicio, sólo nombrar los pasos.

4. Tenés que enviar invitaciones personalizadas para tu cumpleaños. Cada invitación tiene que mencionar el nombre de la persona y la relación que tiene con vos. Contamos con una impresora a la que le das el texto a enviar, un listado con los nombres de los invitados y la relación que cada uno tiene con vos. ¿Cómo redactarías el texto de la invitación? Pista: No vas a necesitar nada de código en este ejercicio, sólo nombrar los pasos.

5. Se te encargó definir qué datos son necesarios para el registro de estudiantes en un curso de inglés. ¿Qué datos crees que deberían ser obligatorios y cuáles opcionales?  ¿Y si el curso es de cocina? Pista: No vas a necesitar nada de código en este ejercicio, sólo nombrar los pasos.

6. Contás con un listado de cosas a comprar y tenes que ir a un supermercado que cuenta con distintas góndolas o pasillos. Cada góndola o pasillo puede contar con varios, uno o ninguno de los productos de tu lista. ¿Cuál sería el listado de instrucciones para poder terminar lo más rápido posible? Pista: No vas a necesitar nada de código en este ejercicio, sólo nombrar los pasos.

7. Con el anexo de Replit de la Unidad 1, realizá tu primer programa: hacé que se imprima por pantalla un `“¡Hola mundo!”`.

## Guía 2: Tipos de Datos, Expresiones y Funciones

1. Guardar el texto "Hola, Mundo!" en una variable e imprimirla por pantalla.

2. Guardar los números 1, 2 y 3 en tres variables distintas e imprimirlos por pantalla.

3. a. Guardar los números 1, 2 y 3 en tres variables distintas y luego sumarlos e imprimir el resultado por pantalla.\
    b. Repetir con las distintas operaciones disponibles que se vieron en la unidad 2: resta, multiplicación, división, división entera, resto, potencia; combinando los números entre sí.

4. Crear un programa que le solicite al usuario:
    a. Su nombre y lo imprima por pantalla.
    b. Su edad y la imprima por pantalla.
    c. Su edad, le sume 1, y la imprima por pantalla.

5. Crear un programa que le solicite al usuario un número, y que devuelva el resto obtenido de dividirlo por 2.\
¿Qué operador vimos para obtener el resto?

6. Escribir un programa que le pida al usuario su año de nacimiento, y que le diga qué edad tiene en el año actual.

7. Crear un programa que le solicite al usuario 5 enteros y que muestre por pantalla el promedio de ellos. Hacerlo de dos formas:
    a. Primero, usando 5 variables para cada entero.
    b. Después, usando una sola variable para almacenar la suma de los 5 enteros. ¿Cómo se te ocurre que podrías hacer?

8. Crear una **función** que reciba un número y que devuelva el valor absoluto.

9. Crear una **función** que reciba un número y que devuelva `True` si es par, y `False` si es impar.

10. Crear una **función** que reciba un número y un string, y que devuelva ambos concatenados dentro de un nuevo string.

11. Crear una **función** que reciba dos enteros y que devuelva el resto y el cociente entre ellos.

12. Crear una función que le pida al usuario su nombre y apellido, e los imprima con el siguiente formato: "Apellido, Nombre".

13. Hacer una **función** que reciba una palabra y devuelva la cantidad de letras que tiene.

14. a. Hacer una **función** que reciba una palabra y que imprima los primeros 5 caracteres únicamente. Ejemplo: Si se recibe "pensamiento" se debe imprimir "pensa".
    b. Hacer una **función** que reciba una palabra y que imprima sólo los caracteres ubicados en posiciones pares. Ejemplo: Si se recibe "pensamiento" se debe imprimir "pnaino".
    c. Hacer una **función** que reciba una palabra y que imprima la palabra dada vuelta. Ejemplo: Si se recibe "materia" se debe imprimir "airetam".

15. Hacer una **funcion** que reciba una palabra, le borre todas las letras "a" e imprima el resultado por pantalla. Pista: usar una función predefinida de Python. Ejemplo: Si se recibe "casa" se debe imprimir "cs". Pista: usar *slices*.

16. Analizar qué tipo de dato (o error) se obtiene al hacer las siguientes operaciones:
    a. `5 / 2`
    b. `5 // 2`
    c. `5 % 2`
    d. `5 ** 2`
    e. `5.0 / 2`
    f. `5.0 // 2`
    g. `5.0 % 2`
    h. `5.0 ** 2`
    i. `5 / 2.0`
    j. `5 // 2.0`
    k. `5 % 2.0`
    l. `5 ** 2.0`
    m. `5.0 / 2.0`
    n. `5.0 // 2.0`
    o. `5.0 % 2.0`
    p. `5.0 ** 2.0`
    r. `"Hola" * 2`
    r. `"Hola" + 2`
    s. `"Hola" + "2"`
    t. `x = "Hola"`\
       `x += " mundo"`

17. a. Escribir una función que convierta un valor dado en grado Celcius, a Fahrenheit. Recordar que la fórmula para la conversión es: `F = 9/5 * C + 32`.
    b. Escribir una función que convierta un valor dado en grados Fahrenheit, a Celcius. Usar la misma fórmula anterior.

18. Escribir una función que calcule el área de un triángulo recibiendo como parámetros su base y su altura.

19. Siendo el cálculo de la norma de un vector $v$ en $R^3$:\
    $$||v|| = \sqrt{v_1^2 + v_2^2 + v_3^2}$$\
    Escribir una función que calcule la norma de un vector en R3 recibiendo como parámetros las 3 componentes $v_1$, $v_2$ y $v_3$ del mismo.

20. **Desafío** (no obligatorio): Calcular el área de un rectángulo (alineado con los ejes $x$ e $y$), dadas sus coordenadas $x_1$, $x_2$, $y_1$ e $y_2$.

## Guía 3: Estructuras de Control

### 1. Decisiones

1. Escribir una función que, dado un número entero $n$, calcule si es impar o no.

2. Escribir una implementación propia de la función $abs$, que devuelva el valor absoluto de cualquier valor que reciba. Ejemplo: `mi_abs(5)` devuelve `5` y `mi_abs(-5)` devuelve `5`. Pista: No se puede usar la función predefinida `abs`.

3. Escribir una función que reciba un número y devuelva `True` si es entero y `False` si no lo es. 
Pista: no se puede usar la función `isinstance`.

4. Escribir una función para determinar si una letra recibida es vocal o no. La misma debe devolver un valor booleano. Luego, escribir una función para determinar si una letra es consonante o no.

    a. Resolver *sin* el uso de `in` ni `not in`.
    b. Resolver *usando* `in` y `not in`.
    c. Resolver para que la función identifique tanto mayúsculas como minúsculas. Pista: investigar los métodos `lower` y `upper` de string.

:::{.callout-tip collapse="true"}
### Tip: `in` y `not in`
¿Conocés el uso de `in`?

Para saber si un elemento está en una lista o en un string, podemos usar `in` y `not in`. Por ejemplo:

```{python}
'a' in 'hola'
```

```{python}
'w' in 'hola'
```

```{python}
'w' not in 'hola'
```

```{python}
'casa' in ['cama', 'mesa', 'silla']
```
:::

5. Escribir funciones que resuelvan los siguientes problemas:

    a. Dado un año, que devuelva si es bisiesto. Nota: un año es bisiesto si es un número divisible por 4, pero no si es divisible por 100, excepto que también sea divisible por 400.
    b. Dado un mes y un año, que devuelva la cantidad de días correspondientes.
    c. Pedirle al usuario su día y mes de cumpleaños. El programa debe imprimir un mensaje indicando a qué signo corresponde el usuario.

    ```
    Aries: 21 de marzo al 20 de abril.
    Tauro: 21 de abril al 20 de mayo.
    Geminis: 21 de mayo al 21 de junio.
    Cancer: 22 de junio al 23 de julio.
    Leo: 24 de julio al 23 de agosto.
    Virgo: 24 de agosto al 23 de septiembre.
    Libra: 24 de septiembre al 22 de octubre.
    Escorpio: 23 de octubre al 22 de noviembre.
    Sagitario: 23 de noviembre al 21 de diciembre.
    Capricornio: 22 de diciembre al 20 de enero.
    Acuario: 21 de enero al 19 de febrero.
    Piscis: 20 de febrero al 20 de marzo.
    ```

6. Piedra, papel o tijera: escribir un programa de "Piedra, papel o tijera" tal que sea imposible que el usuario gane. El usuario debe ingresar **R** (piedra), **P** (papel), o **T** (tijera) y la computadora debe siempre ganarle. Ejemplo:

    ```
    ¡Piedra (R), papel (P) o tijera (T)!
    Ingrese jugada: R
    ¡Papel! ¡Gané!
    ```

    ```
    ¡Piedra (R), papel (P) o tijera (T)!
    Ingrese jugada: P
    ¡Tijera! ¡Gané!
    ```

    ```
    ¡Piedra (R), papel (P) o tijera (T)!
    Ingrese jugada: T
    ¡Piedra! ¡Gané!
    ```

    ```
    ¡Piedra (R), papel (P) o tijera (T)!
    Ingrese jugada: M
    Esa jugada no está disponible.
    ```

7. Suponiendo que el primer día del año fue lunes, escribir una función que reciba un número con el día del año (de 1 a 366) y devuelva el día de la semana que le toca. Por ejemplo: si se recibe '3', debe devolver "miércoles", y si se recibe '9', debe devolver "martes".

### 2. Ciclos

1. Escribir función que:
    a. Imprima por pantalla todos los números entre 10 y 20.
    b. Salude a todas las personas de esta lista `[Flaminia, Iara, Agostina, Priscila, Sol, Lucía]` con el mensaje `"Hola <nombre>! Vamos a aprender a programar"`.
    c. Le pida al usuario que ingrese 5 números y le muestre la suma total de todos ellos.
    d. Imprima por pantalla todos los números entre 100 y 199 que sean divisibles por 7.
    e. Reciba dos números, y recorra todos los números entre ellos, imprimiendo en pantalla si es par o impar. Por ejemplo, recibiendo 1 y 3, debe imprimir:
    
    ```
    1 es impar
    2 es par
    3 es impar
    ```


2. Se quiere hacer un programa para enseñar a los niños las tablas de multiplicar del 1 al 10. Crear una función que reciba un número e imprima por pantalla la tabla de multiplicar de ese número.
    Ejemplo:
    
    ```
    mostrar_tablas_para(1)
    ```
    debe imprimir:
    
    ```
    1 x 1 = 1
    1 x 2 = 2
    1 x 3 = 3
    1 x 4 = 4
    1 x 5 = 5
    1 x 6 = 6
    1 x 7 = 7
    1 x 8 = 8
    1 x 9 = 9
    1 x 10 = 10
    ```

    ```
    mostrar_tablas_para(-2)
    ```
    debe imprimir:
    
    ```
    Error: El número debe ser positivo y estar entre 1 y 10
    ```

3. Crear una función que cante el feliz cumpleaños. Dado un entero, debe imprimir 'Que los cumplas feliz' en distintas líneas por esa cantidad de veces.

4. a. Necesitamos escribir un programa de cobro en el supermercado. La función debe recibir un número entero que representa el monto a pagar y debe permitir al usuario que ingrese valores, hasta que el pago se haya realizado en su totalidad. Además, le debe ir indicando cuánto le queda por pagar. El programa no da vuelto.

    Ejemplo:
    ```
    Su total a pagar es: 500
    Ingrese el monto a pagar: 100
    Pendientes: 400. Ingrese el monto a pagar: 200
    Pendientes: 200. Ingrese el monto a pagar: 200
    Pendientes: 0. Gracias por su compra.
    ```

    b. Hacer que el programa anterior dé vuelto:
    
    Ejemplo:
    ```
    Su total a pagar es: 500
    Ingrese el monto a pagar: 100
    Pendientes: 400. Ingrese el monto a pagar: 200
    Pendientes: 200. Ingrese el monto a pagar: 300
    Pendientes: 0. Su vuelto es: 100. Gracias por su compra.
    ```

5. Escribir un programa que le pida al usuario que ingrese un número. Para ese número, se imprime la tabla de multiplicar del 1 al 10. Luego, se le vuelve a pedir otro número. Si el usuario ingresa "X", el programa debe terminar. El usuario debe poder ingresar números indefinidamente hasta que ingrese "X". Se puede reutilizar la función del ejercicio 9 de esta guía.

    Ejemplo:
    ```
    Hola! Esto es Tablas de Multiplicar
    Ingrese un número o "X" para salir: 1
    1 x 1 = 1
    1 x 2 = 2
    1 x 3 = 3
    1 x 4 = 4
    1 x 5 = 5
    1 x 6 = 6
    1 x 7 = 7
    1 x 8 = 8
    1 x 9 = 9
    1 x 10 = 10
    Ingrese un número o "X" para salir: -2
    Error: El número debe ser positivo y estar entre 1 y 10
    Ingrese un número o "X" para salir: X
    ¡Adios!
    ```

6.  **Manejo de contraseñas**
    a. Escribir un programa que contenga una constraseña inventada, que le pregunte al usuario la contraseña, y no le permita continuar hasta que la haya ingresado correctamente.
    b. Modificar el programa anterior para que solamente permita una cantidad fija de intentos.
    c. Modificar el programa anterior para que sea una función que devuelva si el usuario ingresó o no la contraseña correctamente, mediante un valor booleano (`True` o `False`).

7. a. Hacer una función que reciba un número del 1 al 10, y luego permita al usuario poder adivinar ese número, ingresando valores repetidamente. Para cada ingreso del usuario, el programa debe indicarle si su numero es menor o mayor al número a adivinar. Una vez que el usuario ingresa el número correcto, lo felicita y termina.

    b. Repetir permitiendo únicamente 3 intentos.

    c. Repetir generando el número aleatoriamente de la siguiente forma dentro de la función, sin recibirlo por parámetro:

    ```{python}
    import random
    numero_a_adivinar = random.randint(1, 10)
    print(numero_a_adivinar)
    ```

:::{.callout-note collapse="true"}
### Tip: Librerías
¿Sabías que Python tiene muchas librerías que podés usar para hacer cosas más complejas? Por ejemplo, la librería `random` tiene funciones para generar números aleatorios. También hay otras librerías como `Pandas` para trabajar con datos, `Matplotlib` para hacer gráficos, `Numpy` para trabajar con matrices, y muchas más. Vamos a estar viendo estas tres en la última unidad de la materia.

Una librería es un conjunto de funciones que alguien más escribió y que podemos usar en nuestros programas. Para usar una librería, primero tenemos que importarla. Por ejemplo, para usar la librería `random`, tenemos que poner `import random` al principio de nuestro programa (arriba de todo en nuestro archivo). Luego, podemos usar las funciones de la librería, como `random.randint(1, 10)`.
:::

8. a. Queremos modelar una máquina de sacar juguetes. Debemos hacer una función que reciba un número que representa la cantidad de fichas $x$ que necesita la máquina para funcionar. Se debe imprimir un mensaje en pantalla que indique "Ingresá $x$ fichas para comenzar". El usuario deberá ingresar entonces letras "F", que representan a las fichas. Notar que si se ingresa algo distinto a "F", se ignora.

    Se debe seguir solicitando fichas siempre que no se haya alcanzado la cantidad necesaria para funcionar. Cuando se haya alcanzado la cantidad necesaria, se debe imprimir un mensaje que indique "¡A jugar!".
    Ejemplo:

    ```
    Ingresá 2 fichas para comenzar: F
    Ingresá 2 fichas para comenzar: B
    Ingresá 2 fichas para comenzar: Hola
    Ingresá 2 fichas para comenzar: F
    ¡A jugar!
    ```

    b. Modificar el programa anterior para que vaya mostrando la cantidad de fichas que faltan para comenzar a jugar.
    Ejemplo:

    ```
    Ingresá 2 fichas para comenzar: F
    Ingresá 1 fichas para comenzar: B
    Ingresá 1 fichas para comenzar: ficha
    Ingresá 1 fichas para comenzar: F
    ¡A jugar!
    ```

9. Crear una función que calcule si un número es primo o no. Un número es primo cuando solamente es divisible por sí mismo y por 1. Pista: usar el operador módulo `%`.

10. **Desafío** (obligatorio): Crear una función que reciba un número entero e imprima los números primos entre 0 y el número ingresado.

11. **Desafío**  (obligatorio): 

    a. Crear una función que reciba dos números, y devuelva la suma de todos los números múltiplos de 7 entre esos dos números. Por ejemplo, si recibe 3 y 25, debe devolver 7 + 14 + 21 = 42. Si recibe 3 y 4, debe devolver 0, ya que no hay múltiplos de 7 entre esos dos números.

    b. Repetir calculando el promedio en vez de la suma.

    c. Repetir calculando únicamente el promedio entre los primeros 3 múltiplos de 7 encontrados. Pista: usar `break`.

    d. Repetir calculando únicamente el promedio entre los múltiplos de 7 encontrados que no sean múltiplos de 2. Pista: usar `continue`.

12. **Desafío** (no obligatorio):

    a. Escribir una función que dada la cantidad de ejercicios de un examen, y el porcentaje de ejercicios bien resueltos necesario para aprobar dicho examen, revise un grupo de exámenes. 

    Para ello, en cada paso debe preguntarle al usuario la cantidad de ejercicios resueltos por el alumno, o pedirle que ingrese "*" para salir. Debe mostrar por pantalla el porcentaje correspondiente a la cantidad de ejercicios resueltos respecto a la cantidad de ejercicios del examen y una leyenda que indique si aprobó o no.

    b. Adicional al punto anterior: imprimir un mensaje informándole al usuario la cantidad de ejercicios y el % de aprobación.\
    Validar que el usuario siempre ingrese números positivos y menor o iguales a la cantidad de ejercicios del examen, o "*". De lo contrario, mostrar un mensaje de error y volver a pedirle el dato al usuario.